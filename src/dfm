#!/usr/bin/env python

'''
配置项管理工具(dotfiles manager)，配置项指保存配置信息的文件或包含配置文件的文件夹，配置文件尽量保证是文本文件

Usage:
    dfm add <path>
    dfm rm <path> [-a]
    dfm install [<path>]

Commands:
    add 添加一个配置项，并将其移动至配置项目录并创建相应软链接

Arguments:
    path 配置项路径

Options:
    -h --help
'''

from docopt import docopt
from pathlib import Path
import yaml
import os
import platform
import shutil


dotfiles_root = os.path.join(*[Path.home(), "dotfiles"])


def __load_config():
    config_path = os.path.join(*[dotfiles_root, "dfm.yaml"])
    if not os.path.isfile(config_path):
        return {"dotfiles": {}}
    with open(config_path) as fin:
        config = yaml.load(fin, Loader=yaml.SafeLoader)
        if "dotfiles" not in config:
            config["dotfiles"] = {}
        return config


def __save_config(config):
    config_path = os.path.join(*[Path.home(), "dotfiles", "dfm.yaml"])
    with open(config_path, 'w') as fout:
        print("save config to %s" % config_path)
        fout.write(yaml.dump(config, Dumper=yaml.SafeDumper))


def __get_os_name():
    return platform.system().lower()


def __get_keep_path(path):
    relpath = os.path.relpath(path, Path.home())
    keep_path = os.path.join(
        *[dotfiles_root, __get_os_name(), relpath])
    return keep_path


def __normalize_path(abspath):
    return abspath.replace(str(Path.home()), '~')


def __add(path, config):
    abspath = os.path.abspath(path)
    keep_path = __get_keep_path(abspath)
    os.makedirs(os.path.dirname(keep_path), exist_ok=True)
    shutil.move(abspath, keep_path)
    os.symlink(keep_path, abspath)

    df_path = os.path.relpath(keep_path, dotfiles_root)
    raw_path = __normalize_path(abspath)
    if df_path not in config["dotfiles"]:
        config["dotfiles"][df_path] = {}
    if __get_os_name() not in config["dotfiles"][df_path]:
        config["dotfiles"][df_path][__get_os_name()] = {}
    config["dotfiles"][df_path][__get_os_name()]["path"] = raw_path
    return config


def __rm(path, apply_all, config):
    df_path = os.path.relpath(path, dotfiles_root)
    if df_path not in config["dotfiles"]:
        return config
    if __get_os_name() not in config["dotfiles"][df_path]:
        return config

    realpath = os.path.expanduser(
        config["dotfiles"][df_path][__get_os_name()]["path"])

    if os.path.islink(realpath):
        os.unlink(realpath)
    shutil.move(path, realpath)
    del config["dotfiles"][df_path][__get_os_name()]
    if not config["dotfiles"][df_path]:
        del config["dotfiles"][df_path]
    return config


def __install(path, config):
    df_path = ""
    if not path == "":
        df_path = os.path.abspath(path)
        if df_path not in config["dotfiles"]:
            print("%s is not kept in dotfiles" % df_path)
            return config
        if __get_os_name() not in config["dotfiles"][df_path]:
            return config
    print("df_path: %s" % df_path)

    for item in config["dotfiles"]:
        if __get_os_name() not in config["dotfiles"][item]:
            continue
        item_path = os.path.join(dotfiles_root, item)
        print(item_path)
        if item_path != df_path and df_path != "":
            continue
        print(config["dotfiles"]
              [item][__get_os_name()]["path"])
        sym_path = os.path.expanduser(config["dotfiles"]
                                      [item][__get_os_name()]["path"])
        if os.path.islink(sym_path):
            continue
        elif os.path.exists(sym_path):
            is_replace = input("文件 %s 已存在，是否替换？(y/N)" % sym_path)
            if (is_replace.lower() != 'y'):
                return False
            else:
                if os.path.isfile(sym_path) or os.path.islink(sym_path):
                    os.remove(sym_path)
                else:
                    shutil.rmtree(sym_path)
        os.symlink(item_path, os.path.expanduser(config["dotfiles"]
                                                 [item][__get_os_name()]["path"]))
    return config


def __dispatch(args):
    def check_add_args():
        path = os.path.abspath(args["<path>"])
        if not os.path.isfile(path) and not os.path.isdir(path):
            print("%s is not valid file or directory" % path)
            exit(-1)
        if path.startswith(dotfiles_root):
            print("%s cannot be in dotfiles" % path)
            exit(-1)
        if not path.startswith(str(Path.home())):
            print("%s must be in home" % path)
            exit(-1)
        if os.path.exists(__get_keep_path(path)):
            print("%s has been kept in dotfiles" % path)
            exit(-1)

    def check_rm_args():
        path = os.path.abspath(args["<path>"])
        if not path.startswith(dotfiles_root):
            print("%s must be in dotfiles" % path)
            exit(-1)

    if args["add"]:
        check_add_args()

        def add(config):
            return __add(args["<path>"], config)
        return add
    elif args["rm"]:
        check_rm_args()

        def rm(config):
            return __rm(args["<path>"], args["-a"], config)
        return rm
    elif args["install"]:
        def install(config):
            return __install(args.get("[path]", ""), config)
        return install
    else:
        return None


def main():
    args = docopt(__doc__)
    print(args)

    config = __load_config()
    print(config)

    config = __dispatch(args)(config)
    print(config)
    __save_config(config)


if __name__ == "__main__":
    main()
